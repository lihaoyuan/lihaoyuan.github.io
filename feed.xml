<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="4.0.0">Jekyll</generator>
  
  
  <link href="/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2020-03-16T13:49:39+00:00</updated>
  <id>//</id>

  
    <title type="html">lhy’s blog</title>
  

  
    <subtitle>努力，奋斗</subtitle>
  

  
    <author>
        <name>lhy</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">5G 未来（译文）</title>
      
      
      <link href="/2020/03/16/a-5g-future/" rel="alternate" type="text/html" title="5G 未来（译文）" />
      
      <published>2020-03-16T00:00:00+00:00</published>
      <updated>2020-03-16T00:00:00+00:00</updated>
      <id>/2020/03/16/a-5g-future</id>
      <content type="html" xml:base="/2020/03/16/a-5g-future/">&lt;blockquote&gt;
  &lt;p&gt;这是一篇英文文章的中文翻译&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;This is a Chinese translation of the English language article:&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;Loukides, Mike. “A 5G future”&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.com/radar/a-5g-future/&quot;&gt;https://www.oreilly.com/radar/a-5g-future/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在过去的一年里，5G 通信技术引起了很多人的兴奋，也引发了不少炒作。5G 的技术指标令人瞩目：它将为手机、智能汽车和很多还没发明出来的移动设备提供高达 20 Gbps 的&lt;a href=&quot;https://www.etsi.org/technologies/5g&quot;&gt;峰值数据传输速率&lt;/a&gt;（“&lt;a href=&quot;https://5gobservatory.eu/info-deployments/5g-performance/&quot;&gt;用户体验的数据传输速率&lt;/a&gt;”为 100 Mbps）。很难想象什么样的 app 会需要如此多的数据，而 5G 支持者们似乎觉得一切皆有可能。5G 在实践中意味着什么？我们需要好好想想它能为现实世界带来什么样的变化。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;5G 可能带来的最显著变化不在于手机，而在于本地网络，无论是家庭的还是办公室的。早在 80 年代 Nicholas Negroponte 就&lt;a href=&quot;https://books.google.com/books?id=McBUx67rw7wC&amp;amp;pg=PA338&amp;amp;lpg=PA338&amp;amp;dq=negroponte+everything+wired+will+become+wireless,+and+everything+wireless+will+become+wired.&amp;amp;source=bl&amp;amp;ots=cJTyDDyWhR&amp;amp;sig=ACfU3U14LnXEcU_lGE6lm5jHFk30-mCQ1w&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwiRsZOD7-DlAhWsuFkKHZg9CqwQ6AEwBXoECAkQAQ#v=onepage&amp;amp;q=negroponte%20everything%20wired%20will%20become%20wireless%2C%20and%20everything%20wireless%20will%20become%20wired.&amp;amp;f=false&quot;&gt;说过&lt;/a&gt;，一切有线的东西都会变成无线，而一切无线的东西都会变成有线。对于网络连接的“最后一英里”会发生什么变化呢？现在家庭网络似乎停留在了 50 Mbps 左右，商用网络则稍高一些，如果有别的高带宽选择来打破本地电信运营商的垄断会非常不错，不是每家每户都有光纤，对吧？5G 带来的高速网络也许会推动下一代“&lt;a href=&quot;https://en.wikipedia.org/wiki/Cord-cutting&quot;&gt;剪线族&lt;/a&gt;”的出现，它能取代有线宽带，成为家庭和移动设备的一个无线服务吗？我不需要更高的带宽来开视频会议或看电影，但确实希望能只花几秒而不是几分钟来下载一个系统更新和大文件。每个建过 Docker 容器的人都经历过“现在得等一些大文件下载和解压”的时刻，就算你用的是公司网络，也需要等不少时间。这个可能会随着 5G 到来而消失。&lt;/p&gt;

&lt;p&gt;农村网络连通性是个老生常谈问题，许多农村用户（和一些城市用户）仍然只能使用拨号速度的网络。尽管企业&lt;a href=&quot;https://www.zdnet.com/article/the-realities-of-rural-5g-deployment-in-the-us/&quot;&gt;声称&lt;/a&gt; 5G 将为农村地区提供更好的连通性，但我深表怀疑，因为 5G 使用的是比 4G 更高的频率，而更高的频率更易受路径损耗的影响，5G 基站的覆盖范围肯定会比 4G/LTE 基站小，如果运营商在现有技术下不愿建基站塔，那他们多半也不愿为 5G 建更多塔。所以我猜农村社区会再次被落下。&lt;/p&gt;

&lt;p&gt;以当下手机和嵌入式设备的发展，除了在旅途中用手机来发 Wi-Fi，我不觉得为什么我会需要上千兆的网络。用手机来看电影会很痛苦，待会会谈到这个。5G 热衷者常说它是自动驾驶汽车（AV）的一项使能技术，因为后者会需要高带宽来下载地图和图片，汽车间甚至可能互相交流：在未来的自动驾驶汽车世界里，所有汽车都是自动驾驶的，可以协同规划交通。这个可能很需要 5G 来支持，但再一次地，我很好奇谁会去投资建设农村网络，要是自动驾驶汽车只能在城市里开，那就没那么有用了。对于像自动驾驶汽车间交流这样的场景，相比原始带宽，延迟（多久能收到回复）更有可能是个更大的限制，并且是受物理限制，尽管对 5G 的延迟有令人印象深刻的&lt;a href=&quot;http://www.techplayon.com/5g-nr-control-plane-latency-calculations/&quot;&gt;估计值&lt;/a&gt;，但在实际使用中往往会受到更严苛的考验。可靠性会是一个比延迟更大的问题，还记得你上次去纽约或旧金山是什么样吗？由于信号会在高楼大厦间反射，并在穿过时衰减，大城市的通信服务常常很差，信号频率变高时这些问题会更加严重。不管是自动驾驶汽车还是其他应用场景，提高移动连接的可靠性比提速更重要。5G 打算通过权衡信号质量来解决这个问题，这么做看起来是有道理的，但是否有效尚待观察。&lt;/p&gt;

&lt;p&gt;正在研究&lt;a href=&quot;https://learning.oreilly.com/library/view/tinyml/9781492052036/&quot;&gt;让机器学习运行在超低功耗设备上&lt;/a&gt;的 Pete Warden 表示，5G 对他所关心的应用场景用处不大，当试着做一个能用纽扣电池运行数月的设备时，你会发现无线网络模块耗电比 CPU 还多，所以你必须尽可能保持无线模块关闭，传尽量少的数据。那工作物联网（lloT）和可以放在&lt;a href=&quot;https://www.oreilly.com/radar/tinyml-the-challenges-and-opportunities-of-low-power-ml-applications/&quot;&gt;贴纸&lt;/a&gt;里贴到机器上的传感器呢？这可能是 5G 的一个应用场景，但正如 Warden 所说，这种场景中真正的胜利是消灭电池和电源线，这反过来又要求谨慎地使用低功耗网络，5G 并非理想选择，且初步看来它比现有技术功耗更高。&lt;/p&gt;

&lt;p&gt;抛开功耗不谈，我也不觉得未来会有很多 loT 设备有发送数据的需求。我们已经见识过公众对亚马逊的 Echo 和 Google Home 把对话记录发回给服务器的新闻会作何反应了，我们也已经看到过像智能恒温器和灯泡这样的设备被用于&lt;a href=&quot;https://www.nytimes.com/2018/06/23/technology/smart-home-devices-domestic-abuse.html&quot;&gt;骚扰&lt;/a&gt;。随着隐私法规的完善和&lt;a href=&quot;https://ai.googleblog.com/2017/04/federated-learning-collaborative.html&quot;&gt;联邦学习&lt;/a&gt;这样的技术普及，远距离传输用户数据的需求和欲望将不可避免地减少。&lt;/p&gt;

&lt;p&gt;那 5G 到底在哪里能派上用场？让我们回到家庭网络，我会很乐意为千兆无线网放弃我的 50 Mbps 有线网络。同样的，这是终极剪线，创造了巨大的新的可能性，我可能不想在手机上看 4K 视频（考虑到现有屏幕技术，手机上的高分辨率视频意义不大，更别提说人眼的角分辨率了），但我可能会想用 Chromecast 把手机上的视频传到电视上看。&lt;/p&gt;

&lt;p&gt;我对我现在的 Wi-Fi 部署很满意，但在 5G 世界中我还需要 Wi-Fi 吗？也许出于安全和隐私考虑，把本地网络和外网分隔开也说得通，但这同样是一个 5G 运营商可以解决的问题，虚拟局域网（&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;）早已不是新概念了，笔记本电脑连接千兆网络，加上蜂窝网络提供一个 VLAN，也可以取代掉办公网。无论哪种情况都于需要对隐私和安全做严格的保证，从现有&lt;a href=&quot;https://www.privacypolicies.com/blog/isp-tracking-you/&quot;&gt;运营商追踪用户的记录&lt;/a&gt;来看，还有太多问题要问。&lt;/p&gt;

&lt;p&gt;如果能得到运营商所提供的 VLAN 对隐私和安全的强制保证，我可以想象更大的变革了。长期以来我一直认为，维护经常发生故障且需要备份的硬盘（无论是机械还是固态）没什么意义，我会定期备份数据，但我知道我是少数人。如果所有数据都存在云端、访问速度快到延迟可以忽略会怎样？如果你所有的文档都存在 Google Docs、所有的音乐都在你最喜欢的流服务里呢？这并不是新的愿景，早在九十年代 Sun 就提出了这个想法，它实质上就是谷歌 Chromebook 背后的愿景。&lt;/p&gt;

&lt;p&gt;5G 会如何改变我们对网络的使用方式呢？假如我有 30 或 40 GB 的照片，我可以把它们全部上传到 Google Photos 或其他服务里，但你不会想用 50 Mbps 下载和 10 Mbps 上传的网络做这种，但如果是上千兆的网络，就不用考虑了。我一直对音视频流媒体兴趣不大，有一部分原因是它们常常在你最需要的时候不可用：飞机或火车上，或是在一个 3000 人参加、把酒店网络挤爆的技术会议（真有人曾跟我说过“那你应该在出发前把所有想听的东西下下来”），但如果有千兆带宽的微型基站，这些流媒体就有用了。也许不是对飞在基站范围外的飞机（WoeFi 仍将保持正常运行），可能不是对开在农村的车，但如果我的手机能用上千兆的网络，那我为什么还要在意 Amtrak 缓慢的 Wi-Fi 和酒店的网络拥堵呢？如果办公室可以给我的笔记本提供这样的带宽，并对云安全提供足够的保证，为什么我们还要担心办公室局域网呢？&lt;/p&gt;

&lt;p&gt;不管你喜不喜欢，在我看来，这会是一个全新的模式：我们不需要管数据存哪了，不用担心备份，也不用担心停电，我们随身携带自己的网络，甚至不需要担心安全问题，Google、Amazon 和 Microsoft 都比我更擅长备份和应对网络中断，而且非常清楚如何保护我的数据。如果 Google 能推动用户打开&lt;a href=&quot;https://authy.com/what-is-2fa/&quot;&gt;双因素验证&lt;/a&gt;（2FA）或用&lt;a href=&quot;https://www.extremetech.com/computing/274067-google-eliminated-phishing-by-giving-all-85000-employees-usb-security-keys&quot;&gt;安全加密狗&lt;/a&gt;，这会是迈向计算机安全的重要一步。这些云服务会、也必须保证这些数据的隐私性，就像数据保存在用户自己硬盘或办公室机房一样，这是一个&lt;a href=&quot;https://en.wikipedia.org/wiki/FBI–Apple_encryption_dispute&quot;&gt;很容易解决&lt;/a&gt;的问题。&lt;/p&gt;

&lt;p&gt;对商业的影响会更加重要，家庭用户想要千兆网络，而企业会需要到兆兆或千兆兆。当千兆网络无处不在时，移动大型数据集会简单得多。不管是 AI 应用的训练数据还是交易记录，企业总是移动数据、很多数据，在现有技术下，移动大量数据的最好方法通常是把&lt;a href=&quot;https://aws.amazon.com/snowmobile/&quot;&gt;硬盘放在卡车上&lt;/a&gt;，如果安全和隐私能得到硬性保证的话，5G 就能让我们更接近于解决这个问题了，企业比普通用户更不希望让第三方使用他们的数据。&lt;/p&gt;

&lt;p&gt;我相信 5G 还会带来可以用上这种带宽的、我们还没想像出来的新一代智能设备，但我还是更关心我现在能想象到的，与自己的数据脱钩：随时随地访问、无需随身携带或存在柜子里的某些机器上，这才是 5G 真正的前景。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>lhy</name>
          
          
        </author>
      

      

      
        <category term="translations" />
      

      
        <summary type="html">这是一篇英文文章的中文翻译 This is a Chinese translation of the English language article: Loukides, Mike. “A 5G future” https://www.oreilly.com/radar/a-5g-future/ 在过去的一年里，5G 通信技术引起了很多人的兴奋，也引发了不少炒作。5G 的技术指标令人瞩目：它将为手机、智能汽车和很多还没发明出来的移动设备提供高达 20 Gbps 的峰值数据传输速率（“用户体验的数据传输速率”为 100 Mbps）。很难想象什么样的 app 会需要如此多的数据，而 5G 支持者们似乎觉得一切皆有可能。5G 在实践中意味着什么？我们需要好好想想它能为现实世界带来什么样的变化。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">使用 VS Code 调试 Xv6</title>
      
      
      <link href="/2020/01/23/vscode-debugging-xv6/" rel="alternate" type="text/html" title="使用 VS Code 调试 Xv6" />
      
      <published>2020-01-23T00:00:00+00:00</published>
      <updated>2020-01-23T00:00:00+00:00</updated>
      <id>/2020/01/23/vscode-debugging-xv6</id>
      <content type="html" xml:base="/2020/01/23/vscode-debugging-xv6/">&lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2019/xv6.html&quot;&gt;Xv6&lt;/a&gt; 是MIT 开发的一个教学使用的类 Unix 操作系统，&lt;a href=&quot;https://github.com/mit-pdos/xv6-public&quot;&gt;开源&lt;/a&gt;并且配有“&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2019/xv6/book-riscv-rev0.pdf&quot;&gt;课本&lt;/a&gt;”。相比大而全的教科书，它更加精简，只包含部分核心的操作系统思想和概念；又更加具体，完全可以从源码层面去看如何简单地实现进程、页表、锁这些基础设施，很适合在离开学校之后拿来补课。&lt;/p&gt;

&lt;p&gt;除了课本和注释，阅读和理解一份源码最有效的方式就是把它跑起来、调试起来，下面会说明怎么用在 macOS 下运行和使用 VS Code 调试 Xv6 内核。&lt;/p&gt;

&lt;h3 id=&quot;如何运行-xv6&quot;&gt;如何运行 Xv6&lt;/h3&gt;

&lt;p&gt;课程官网或一些博客都能找到关于运行 Xv6 的介绍，这里就只简单写一下步骤。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;把&lt;a href=&quot;https://github.com/mit-pdos/xv6-public.git&quot;&gt;代码&lt;/a&gt; 下载到 Mac 上；&lt;/li&gt;
  &lt;li&gt;安装 Xcode 命令行工具和 Homebrew（如果还没有的话）；&lt;/li&gt;
  &lt;li&gt;按照&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2019/tools.html&quot;&gt;官网的指引&lt;/a&gt;安装运行 Xv6 依赖的 qemu、riscv-tools；&lt;/li&gt;
  &lt;li&gt;这时，&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 到代码目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;make qemu&lt;/code&gt; 应该就可以编译和运行了。&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xv6/run-xv6.png&quot; alt=&quot;run xv6&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何调试-xv6&quot;&gt;如何调试 Xv6&lt;/h3&gt;

&lt;p&gt;课本第二章章末练习中介绍到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;make qemu-gdb&lt;/code&gt; 就是用于调试的命令，提供启动时等待 debugger attach 的能力，在另一个命令行窗口中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; 时，gdb 就会 attach 到等待运行的 Xv6 上。&lt;/p&gt;

&lt;p&gt;新版本的 macOS 没有自带 gdb，所以需要先安装&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但这时由于 riscv-gnu-toolchain 和 gdb link 了同一个文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;jit-reader.h&lt;/code&gt;，会导致 gdb 安装中断，可根据 brew 的提示运行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--overwrite&lt;/span&gt; gdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时再运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;make qemu-gdb&lt;/code&gt;，应该就会看到命令行进入等待 gdb attach 的状态，在其他窗口中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt;，就可以按练习中的方式设置断点和其他调试了。&lt;/p&gt;

&lt;h3 id=&quot;如何使用-vs-code-调试-xv6&quot;&gt;如何使用 VS Code 调试 Xv6&lt;/h3&gt;

&lt;p&gt;如果用顺手的 IDE 取代命令行的 gdb 来做 attach ，调试会方便得多。&lt;/p&gt;

&lt;p&gt;为了方便编译，先添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/task.json&lt;/code&gt;，添加后可以通过 command+shift+B 在 VS Code 的 terminal 中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;make qemu-gdb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compile and run xv6 in debug mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;make &amp;amp;&amp;amp; make qemu-gdb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;presentation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reveal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;panel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;showReuseMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isDefault&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; 文件如下，就可以在 VS Code 的 debug 面板中看到相应的运行选项。需要注意的是，这个配置只负责 attach，点击 run 之前需要先运行上面的 task 或手动在命令行跑 &lt;code class=&quot;highlighter-rouge&quot;&gt;make qemu-gdb&lt;/code&gt;，并把 &lt;code class=&quot;highlighter-rouge&quot;&gt;miDebuggerServerAddress&lt;/code&gt; 改成 terminal 中最后输出的端口号&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Remote Debug Xv6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;miDebuggerServerAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:25502&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/kernel/kernel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;MIMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;serverLaunchTimeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;engineLogging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/main.c&lt;/code&gt; 中打个断点，点 run 就会看到 Xv6 的运行被中断了。🎉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xv6/debug-xv6.png&quot; alt=&quot;debug-xv6&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;one-more-thing&quot;&gt;One more thing&lt;/h3&gt;

&lt;p&gt;再对其他函数做进一步的调试会发现，运行时代码里的很多符号被优化掉了，原因是 Makefile 没有对调试模式的编译选项做额外处理，由于是出于学习目的跑 Xv6，为了方便直接把两种运行模式的编译优化都关掉&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Makefile line 57&lt;/span&gt;
CFLAGS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Werror&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-omit-frame-pointer&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ggdb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候再编译会先后报几个问题，根据错误信息一一处理掉即可&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Makefile line 60&lt;/span&gt;
CFLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ffreestanding&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-common&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-mno-relax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// user/usertests.c line 2123&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// user/usertests.c line 2186&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可参考&lt;a href=&quot;https://github.com/lihaoyuan/xv6-riscv/commit/b2930ce6bed375f252bb73ce7069ecbf96100345&quot;&gt;这个提交&lt;/a&gt;。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>lhy</name>
          
          
        </author>
      

      

      
        <category term="tutorials" />
      

      
        <summary type="html">Xv6 是MIT 开发的一个教学使用的类 Unix 操作系统，开源并且配有“课本”。相比大而全的教科书，它更加精简，只包含部分核心的操作系统思想和概念；又更加具体，完全可以从源码层面去看如何简单地实现进程、页表、锁这些基础设施，很适合在离开学校之后拿来补课。 除了课本和注释，阅读和理解一份源码最有效的方式就是把它跑起来、调试起来，下面会说明怎么用在 macOS 下运行和使用 VS Code 调试 Xv6 内核。 如何运行 Xv6 课程官网或一些博客都能找到关于运行 Xv6 的介绍，这里就只简单写一下步骤。 把代码 下载到 Mac 上； 安装 Xcode 命令行工具和 Homebrew（如果还没有的话）； 按照官网的指引安装运行 Xv6 依赖的 qemu、riscv-tools； 这时，cd 到代码目录，make qemu 应该就可以编译和运行了。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Hello, World!</title>
      
      
      <link href="/2019/11/30/hello-world/" rel="alternate" type="text/html" title="Hello, World!" />
      
      <published>2019-11-30T00:00:00+00:00</published>
      <updated>2019-11-30T00:00:00+00:00</updated>
      <id>/2019/11/30/hello-world</id>
      <content type="html" xml:base="/2019/11/30/hello-world/">&lt;p&gt;Hi，我是一名&lt;del&gt;就快没人要了的&lt;/del&gt; iOS 开发者。&lt;/p&gt;

&lt;p&gt;不久前看的一篇旧文《&lt;a href=&quot;https://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx&quot;&gt;Dark Matter Developers: The Unseen 99%&lt;/a&gt;》里提出存在 99% 的”暗物质开发者”：他们不会读很多博客，从不写博客、参加群组或在社交媒体上发声，也不会经常出现在大型会议里、追求时髦的技术，只是专注地用早已成熟的技术把自己的工作做完，就像宇宙中的暗物质，不可见但确实存在的大多数。身边的不少同事、以前的同学大概属于这种类型，亦或者我自己很大程度上也在其中，那么也许建这个博客、写这篇文章也是我走向”可见”的第一步。&lt;/p&gt;

&lt;p&gt;这个博客是在国庆假期建的，当时正在准备离职，之前准备面试的过程中能感觉到日常积累总结的对工作回顾、面试的重要，一是把一件事写下来或对别人讲出来能强迫自己更加系统、全面地思考；二是把当时的所见所思记录下来，也能避免过三五个月就忘掉做过什么；一个有内容的博客当然也能丰富简历。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;在我看来如何表达、如何与人交流是作为程序员、乃至作为一个个人来说非常重要一项的软技能，可我实在算不上擅长组织语言，也不是有很多阅历、思考可以分享的人，很少当众发表言论和看法，连这篇自我介绍式的文章也写得磕磕绊绊的，日常接触得更多的还是计算机和编程，所以写些技术文章不失为一种一举多得的锻炼思维的方式。&lt;/p&gt;

&lt;p&gt;设想中在这个博客里会有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一些解决问题的思路和方案&lt;/li&gt;
  &lt;li&gt;一些阅读笔记和源码分析&lt;/li&gt;
  &lt;li&gt;可能会有对工作的思考&lt;/li&gt;
  &lt;li&gt;可能会分享或翻译一些有启发的文章&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（当然也可能过不久就从入门到放弃了）&lt;/p&gt;

&lt;p&gt;目前这个博客还处于比较初始的状态，样式是在 &lt;a href=&quot;https://github.com/yous/whiteglass&quot;&gt;whiteglass&lt;/a&gt; 上改的，没有评论区或者阅读数之类的功能，不过个人还比较喜欢简单的样式，有时间再慢慢调整吧&lt;/p&gt;

&lt;p&gt;就这样，有任何问题欢迎右上角联系我👋&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>lhy</name>
          
          
        </author>
      

      

      
        <category term="about" />
      

      
        <summary type="html">Hi，我是一名就快没人要了的 iOS 开发者。 不久前看的一篇旧文《Dark Matter Developers: The Unseen 99%》里提出存在 99% 的”暗物质开发者”：他们不会读很多博客，从不写博客、参加群组或在社交媒体上发声，也不会经常出现在大型会议里、追求时髦的技术，只是专注地用早已成熟的技术把自己的工作做完，就像宇宙中的暗物质，不可见但确实存在的大多数。身边的不少同事、以前的同学大概属于这种类型，亦或者我自己很大程度上也在其中，那么也许建这个博客、写这篇文章也是我走向”可见”的第一步。 这个博客是在国庆假期建的，当时正在准备离职，之前准备面试的过程中能感觉到日常积累总结的对工作回顾、面试的重要，一是把一件事写下来或对别人讲出来能强迫自己更加系统、全面地思考；二是把当时的所见所思记录下来，也能避免过三五个月就忘掉做过什么；一个有内容的博客当然也能丰富简历。</summary>
      

      
      
    </entry>
  
  
</feed>
